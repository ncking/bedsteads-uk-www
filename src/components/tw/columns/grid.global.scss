

:root{
    --columns: 12;
    --columns-6: 6;
}


.cols {
    position: relative; // @NK dont remove this
    display: grid;
    grid-template-columns: repeat(var(--columns), minmax(0, 1fr));
   

    // WE dont need this & messes up a added padding, without border-box width: 100%;
    box-sizing: border-box;
}

.cols-subgrid {
    display:grid;
}

.col-span-full {
    grid-column: 1/-1; // https://stackoverflow.com/questions/47319464/make-a-grid-column-span-the-entire-row
}


.hidden{
    display:none
}



/**
 *  ORDER
 */

.order-1 {
    order: 1
}

.order-2 {
    order: 2
}

.order-3 {
    order: 3
}


/**
 * OFFSET
 */

.col-start-1 {
    grid-column-start: 1
}

.col-start-2 {
    grid-column-start: 2
}

.col-start-3 {
    grid-column-start: 3
}

.col-start-4 {
    grid-column-start: 4
}

.col-start-6 {
    grid-column-start: 6
}


/**
 * SPAN
 * 
 */



.col-span-1 {
    grid-column: span 1 / span 1;
}

.col-span-2 {
    grid-column: span 2 / span 2;
}

.col-span-3 {
    grid-column: span 3 / span 3;
}

.col-span-4 {
    grid-column: span 4 / span 4;
}

.col-span-5 {
    grid-column: span 5 / span 5;
}

.col-span-6 {
    grid-column: span 6 / span 6;
}

.col-span-7 {
    grid-column: span 7 / span 7;
}

.col-span-8 {
    grid-column: span 8 / span 8;
}

.col-span-9 {
    grid-column: span 9 / span 9;
}

.col-span-10 {
    grid-column: span 10 / span 10;
}

.col-span-11 {
    grid-column: span 11 / span 11;
}

.col-span-12 {
    grid-column: span 12 / span 12;
}



/**
 * The number of columns in this grid,
 * if the columns dont have any span sets ... this works naturally
 * 
 * If you need colum positioning, dont use this but add classes to specific columns
 */
.cols-1 {
    --columns: 1;
}

.cols-2 {
    --columns: 2;
}

.cols-3 {
    --columns: 3;
}

.cols-4 {
    --columns: 4;
}

.cols-6 {
    --columns: 6;
}

.cols-12 {
    --columns: 12;
}

@include min(sm){
/**
 *  ORDER
 */

.sm\:order-1 {
    order: 1
}

.sm\:order-2 {
    order: 2
}

.sm\:order-3 {
    order: 3
}


/**
 * OFFSET
 */

.sm\:col-start-1 {
    grid-column-start: 1
}

.sm\:col-start-2 {
    grid-column-start: 2
}

.sm\:col-start-3 {
    grid-column-start: 3
}

.sm\:col-start-4 {
    grid-column-start: 4
}

.sm\:col-start-6 {
    grid-column-start: 6
}


/**
 * SPAN
 * 
 */



.sm\:col-span-1 {
    grid-column: span 1 / span 1;
}

.sm\:col-span-2 {
    grid-column: span 2 / span 2;
}

.sm\:col-span-3 {
    grid-column: span 3 / span 3;
}

.sm\:col-span-4 {
    grid-column: span 4 / span 4;
}

.sm\:col-span-5 {
    grid-column: span 5 / span 5;
}

.sm\:col-span-6 {
    grid-column: span 6 / span 6;
}

.sm\:col-span-7 {
    grid-column: span 7 / span 7;
}

.sm\:col-span-8 {
    grid-column: span 8 / span 8;
}

.sm\:col-span-9 {
    grid-column: span 9 / span 9;
}

.sm\:col-span-10 {
    grid-column: span 10 / span 10;
}

.sm\:col-span-11 {
    grid-column: span 11 / span 11;
}

.sm\:col-span-12 {
    grid-column: span 12 / span 12;
}



/**
 * The number of columns in this grid,
 * if the columns dont have any span sets .sm\:.sm\:.sm\: this works naturally
 * 
 * If you need colum positioning, dont use this but add classes to specific columns
 */
.sm\:cols-1 {
    --columns: 1;
}

.sm\:cols-2 {
    --columns: 2;
}

.sm\:cols-3 {
    --columns: 3;
}

.sm\:cols-4 {
    --columns: 4;
}

.sm\:cols-6 {
    --columns: 6;
}

.sm\:cols-12 {
    --columns: 12;
}

    }

@include min(md){
/**
 *  ORDER
 */

.md\:order-1 {
    order: 1
}

.md\:order-2 {
    order: 2
}

.md\:order-3 {
    order: 3
}


/**
 * OFFSET
 */

.md\:col-start-1 {
    grid-column-start: 1
}

.md\:col-start-2 {
    grid-column-start: 2
}

.md\:col-start-3 {
    grid-column-start: 3
}

.md\:col-start-4 {
    grid-column-start: 4
}

.md\:col-start-6 {
    grid-column-start: 6
}


/**
 * SPAN
 * 
 */



.md\:col-span-1 {
    grid-column: span 1 / span 1;
}

.md\:col-span-2 {
    grid-column: span 2 / span 2;
}

.md\:col-span-3 {
    grid-column: span 3 / span 3;
}

.md\:col-span-4 {
    grid-column: span 4 / span 4;
}

.md\:col-span-5 {
    grid-column: span 5 / span 5;
}

.md\:col-span-6 {
    grid-column: span 6 / span 6;
}

.md\:col-span-7 {
    grid-column: span 7 / span 7;
}

.md\:col-span-8 {
    grid-column: span 8 / span 8;
}

.md\:col-span-9 {
    grid-column: span 9 / span 9;
}

.md\:col-span-10 {
    grid-column: span 10 / span 10;
}

.md\:col-span-11 {
    grid-column: span 11 / span 11;
}

.md\:col-span-12 {
    grid-column: span 12 / span 12;
}



/**
 * The number of columns in this grid,
 * if the columns dont have any span sets .md\:.md\:.md\: this works naturally
 * 
 * If you need colum positioning, dont use this but add classes to specific columns
 */
.md\:cols-1 {
    --columns: 1;
}

.md\:cols-2 {
    --columns: 2;
}

.md\:cols-3 {
    --columns: 3;
}

.md\:cols-4 {
    --columns: 4;
}

.md\:cols-6 {
    --columns: 6;
}

.md\:cols-12 {
    --columns: 12;
}

    }

@include min(lg){
/**
 *  ORDER
 */

.lg\:order-1 {
    order: 1
}

.lg\:order-2 {
    order: 2
}

.lg\:order-3 {
    order: 3
}


/**
 * OFFSET
 */

.lg\:col-start-1 {
    grid-column-start: 1
}

.lg\:col-start-2 {
    grid-column-start: 2
}

.lg\:col-start-3 {
    grid-column-start: 3
}

.lg\:col-start-4 {
    grid-column-start: 4
}

.lg\:col-start-6 {
    grid-column-start: 6
}


/**
 * SPAN
 * 
 */



.lg\:col-span-1 {
    grid-column: span 1 / span 1;
}

.lg\:col-span-2 {
    grid-column: span 2 / span 2;
}

.lg\:col-span-3 {
    grid-column: span 3 / span 3;
}

.lg\:col-span-4 {
    grid-column: span 4 / span 4;
}

.lg\:col-span-5 {
    grid-column: span 5 / span 5;
}

.lg\:col-span-6 {
    grid-column: span 6 / span 6;
}

.lg\:col-span-7 {
    grid-column: span 7 / span 7;
}

.lg\:col-span-8 {
    grid-column: span 8 / span 8;
}

.lg\:col-span-9 {
    grid-column: span 9 / span 9;
}

.lg\:col-span-10 {
    grid-column: span 10 / span 10;
}

.lg\:col-span-11 {
    grid-column: span 11 / span 11;
}

.lg\:col-span-12 {
    grid-column: span 12 / span 12;
}



/**
 * The number of columns in this grid,
 * if the columns dont have any span sets .lg\:.lg\:.lg\: this works naturally
 * 
 * If you need colum positioning, dont use this but add classes to specific columns
 */
.lg\:cols-1 {
    --columns: 1;
}

.lg\:cols-2 {
    --columns: 2;
}

.lg\:cols-3 {
    --columns: 3;
}

.lg\:cols-4 {
    --columns: 4;
}

.lg\:cols-6 {
    --columns: 6;
}

.lg\:cols-12 {
    --columns: 12;
}

    }

@include min(xl){
/**
 *  ORDER
 */

.xl\:order-1 {
    order: 1
}

.xl\:order-2 {
    order: 2
}

.xl\:order-3 {
    order: 3
}


/**
 * OFFSET
 */

.xl\:col-start-1 {
    grid-column-start: 1
}

.xl\:col-start-2 {
    grid-column-start: 2
}

.xl\:col-start-3 {
    grid-column-start: 3
}

.xl\:col-start-4 {
    grid-column-start: 4
}

.xl\:col-start-6 {
    grid-column-start: 6
}


/**
 * SPAN
 * 
 */



.xl\:col-span-1 {
    grid-column: span 1 / span 1;
}

.xl\:col-span-2 {
    grid-column: span 2 / span 2;
}

.xl\:col-span-3 {
    grid-column: span 3 / span 3;
}

.xl\:col-span-4 {
    grid-column: span 4 / span 4;
}

.xl\:col-span-5 {
    grid-column: span 5 / span 5;
}

.xl\:col-span-6 {
    grid-column: span 6 / span 6;
}

.xl\:col-span-7 {
    grid-column: span 7 / span 7;
}

.xl\:col-span-8 {
    grid-column: span 8 / span 8;
}

.xl\:col-span-9 {
    grid-column: span 9 / span 9;
}

.xl\:col-span-10 {
    grid-column: span 10 / span 10;
}

.xl\:col-span-11 {
    grid-column: span 11 / span 11;
}

.xl\:col-span-12 {
    grid-column: span 12 / span 12;
}



/**
 * The number of columns in this grid,
 * if the columns dont have any span sets .xl\:.xl\:.xl\: this works naturally
 * 
 * If you need colum positioning, dont use this but add classes to specific columns
 */
.xl\:cols-1 {
    --columns: 1;
}

.xl\:cols-2 {
    --columns: 2;
}

.xl\:cols-3 {
    --columns: 3;
}

.xl\:cols-4 {
    --columns: 4;
}

.xl\:cols-6 {
    --columns: 6;
}

.xl\:cols-12 {
    --columns: 12;
}

    }

@include min(xxl){
/**
 *  ORDER
 */

.xxl\:order-1 {
    order: 1
}

.xxl\:order-2 {
    order: 2
}

.xxl\:order-3 {
    order: 3
}


/**
 * OFFSET
 */

.xxl\:col-start-1 {
    grid-column-start: 1
}

.xxl\:col-start-2 {
    grid-column-start: 2
}

.xxl\:col-start-3 {
    grid-column-start: 3
}

.xxl\:col-start-4 {
    grid-column-start: 4
}

.xxl\:col-start-6 {
    grid-column-start: 6
}


/**
 * SPAN
 * 
 */



.xxl\:col-span-1 {
    grid-column: span 1 / span 1;
}

.xxl\:col-span-2 {
    grid-column: span 2 / span 2;
}

.xxl\:col-span-3 {
    grid-column: span 3 / span 3;
}

.xxl\:col-span-4 {
    grid-column: span 4 / span 4;
}

.xxl\:col-span-5 {
    grid-column: span 5 / span 5;
}

.xxl\:col-span-6 {
    grid-column: span 6 / span 6;
}

.xxl\:col-span-7 {
    grid-column: span 7 / span 7;
}

.xxl\:col-span-8 {
    grid-column: span 8 / span 8;
}

.xxl\:col-span-9 {
    grid-column: span 9 / span 9;
}

.xxl\:col-span-10 {
    grid-column: span 10 / span 10;
}

.xxl\:col-span-11 {
    grid-column: span 11 / span 11;
}

.xxl\:col-span-12 {
    grid-column: span 12 / span 12;
}



/**
 * The number of columns in this grid,
 * if the columns dont have any span sets .xxl\:.xxl\:.xxl\: this works naturally
 * 
 * If you need colum positioning, dont use this but add classes to specific columns
 */
.xxl\:cols-1 {
    --columns: 1;
}

.xxl\:cols-2 {
    --columns: 2;
}

.xxl\:cols-3 {
    --columns: 3;
}

.xxl\:cols-4 {
    --columns: 4;
}

.xxl\:cols-6 {
    --columns: 6;
}

.xxl\:cols-12 {
    --columns: 12;
}

    }